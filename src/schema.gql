# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddFollowersToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddFollowingsToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

type Avatar {
  publicID: String!
  url: String!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateManyUsersInput {
  """Array of records to create"""
  users: [UserInput!]!
}

input CreateOneUserInput {
  """The record to create"""
  user: UserInput!
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Mutation {
  addFollowersToUser(input: AddFollowersToUserInput!): User!
  addFollowingsToUser(input: AddFollowingsToUserInput!): User!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneUser(input: CreateOneUserInput!): User!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  setFollowersOnUser(input: SetFollowersOnUserInput!): User!
  setFollowingsOnUser(input: SetFollowingsOnUserInput!): User!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneUser(input: UpdateOneUserInput!): User!
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Query {
  user(
    """The id of the record to find."""
    id: ID!
  ): User!
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
}

input SetFollowersOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetFollowingsOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UserInput!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UserInput!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: Avatar
  bio: String
  followers(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserFollowersConnection
  followings(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserFollowingsConnection
  id: ID
  name: String
  password: String
  username: String
}

type UserConnection {
  """Array of edges."""
  edges: [UserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  id: IDFilterComparison
  or: [UserDeleteFilter!]
  username: StringFieldComparison
}

type UserDeleteResponse {
  avatar: Avatar
  bio: String
  id: ID
  name: String
  password: String
  username: String
}

type UserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the User"""
  node: User!
}

input UserFilter {
  and: [UserFilter!]
  id: IDFilterComparison
  or: [UserFilter!]
  username: StringFieldComparison
}

type UserFollowersConnection {
  """Array of edges."""
  edges: [UserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type UserFollowingsConnection {
  """Array of edges."""
  edges: [UserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input UserInput {
  avatar: Upload!
  bio: String
  name: String!
  password: String!
  username: String!
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  id
  username
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  id: IDFilterComparison
  or: [UserUpdateFilter!]
  username: StringFieldComparison
}